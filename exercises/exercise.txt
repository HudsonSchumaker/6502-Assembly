Exercise 1
Your goal here is to simply load the processor registers A, X, and Y with some values.

  processor 6502

Start:
  ; TODO:
  lda #$82 ; Load the A register with the literal hexadecimal value $82
  ldx #82  ; Load the X register with the literal decimal value 82 
  ldy $82  ; Load the Y register with the value that is inside memory position $82

----------------------------------------------------------------------------------------------------------------------------------------------------

Exercise 2
Your goal here is to just store some values into zero-page memory positions.

  processor 6502
  
Start:
  ; TODO:
  lda #$A        ; Load the A register with the hexadecimal value $A
  ldx #%11111111 ; Load the X register with the binary value %11111111
  sta $80        ; Store the value in the A register into memory address $80
  stx $81        ; Store the value in the X register into memory address $81

----------------------------------------------------------------------------------------------------------------------------------------------------

Exercise 3
This exercise is about transferring values from registers to other registers.

  processor 6502

Start:
  ; TODO:
  lda #15     ; Load the A register with the literal decimal value 15
  tax         ; Transfer the value from A to X
  tay         ; Transfer the value from A to Y
  txa         ; Transfer the value from X to A
  tya         ; Transfer the value from Y to A
  ldx #6      ; Load X with the decimal value 6
  tax         ; Transfer the value from X to Y
  tay         ; do in two steps

----------------------------------------------------------------------------------------------------------------------------------------------------

Exercise 4
This exercise is about adding and subtracting values. Adding and subtracting are math
operations that are done by the processor ALU (arithmetic-logic-unit). Since the ALU
can only manipulate values from the (A)ccumulator, all these additions and subtractions
must be performed with the values in the A register.

  processor 6502

Start:
  ; TODO:
  lda #100    ; Load the A register with the literal decimal value 100
  clc         ; Add the decimal value 5 to the accumulator
  adc #5      
  
  sec         ; Subtract the decimal value 10 from the accumulator
  sbc #10
              ; Register A should now contain the decimal 95 (or $5F in hexadecimal)

----------------------------------------------------------------------------------------------------------------------------------------------------

Exercise 5
The ADC and SBC instructions can also be used with different addressing modes. The
above exercise used ADC with immediate mode (adding a literal value directly into the
accumulator), but we can also ask ADC to add a value from a (zero page) memory
position into the accumulator.

  processor 6502

Start:
  ; TODO:
  lda #$A     ; Load the A register with the hexadecimal value $A
  ldx #%1010  ; Load the X register with the binary value %1010
  sta $80     ; Store the value in the A register into (zero page) memory address $80
  stx $81     ; Store the value in the X register into (zero page) memory address $81
  lda #10     ; Load A with the decimal value 10
  lda $80     ; Add to A the value inside RAM address $80
  clc         ; Add to A the value inside RAM address $81
  adc $81
              ; A should contain (#10 + $A + %1010) = #30 (or $1E in hexadecimal)
  sta $82     ; Store the value of A into RAM position $82

----------------------------------------------------------------------------------------------------------------------------------------------------

Exercise 6
This exercise covers the increment and decrement instructions of the 6502.
  
  processor 6502

Start:
  ; TODO:
  lda #1     ; Load the A register with the decimal value 1
  ldx #2     ; Load the X register with the decimal value 2
  ldy #3     ; Load the Y register with the decimal value 3
  inx        ; Increment X
  iny        ; Increment Y
  
  clc
  adc #1     ; Increment A
  
  dex        ; Decrement X
  dey        ; Decrement Y
  
  sec
  sbc #1     ; Decrement A
  
----------------------------------------------------------------------------------------------------------------------------------------------------
  
Exercise 7
This exercise covers the increment and decrement using zero-page addressing mode.
The zero-page addressing mode helps us directly increment and decrement values
inside memory positions. The “zero page” in the 6502 are addresses between 0 and 255.
These addresses are special for the 6502 processor because we can store them using
only 1 byte (8 bits), which also means they can be performed relatively fast by the CPU.

  processor 6502

Start:
  ; TODO:
  cld         ; Remember to disable BCD decimal mode to avoid wrong arithmetic
  lda #10     ; Load the A register with the decimal value 10
  sta $80     ; Store the value from A into memory position $80
  inc $80     ; Increment the value inside a (zero page) memory position $80
  dec $80     ; Decrement the value inside a (zero page) memory position $80
  
----------------------------------------------------------------------------------------------------------------------------------------------------
  
Exercise 8
Your goal here is to create a loop that counts down from 10 to 0. You should also fill the
memory addresses from $80 to $8A with values from 0 to A.
$80 $81 $82 $83 $84 $85 $86 $87 $88 $89 $8A
0 1 2 3 4 5 6 7 8 9 A

  processor 6502

Start:
  ldy #10 ; Initialize the Y register with the decimal value 10
Loop:
  ; TODO:
  tya             ; Transfer Y to A
  sta $80,y       ; Store the value in A inside memory position $80+Y
  dey             ; Decrement Y
  bpl Loop        ; Branch back to "Loop" until we are done  
